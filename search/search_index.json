{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ramprasad Guduru","text":""},{"location":"#devops-engineer","title":"DevOps Engineer","text":""},{"location":"#summary","title":"Summary","text":"<p>I'm Ramaprasad Guduru working as a DevOps Engineer. I have Experience in Provisioning and Managing Cloud Infrastructure. Automating maintenance and regular jobs on Cloud Infrastructure. Experience handling the Entire Project Lifecycle.</p>"},{"location":"Azure-DevOps-Introduction/","title":"Azure-DevOps-Introduction","text":"<p>Azure DevOps includes everything you need to plan, develop, test, and deploy your applications, all in one place. Here\u2019s a quick overview of the core components:</p> <p>Boards: Use Agile boards to track work items and assign tasks to team members.</p> <p>Repos: Host your code in Git repositories and collaborate with others using pull requests and code reviews.</p> <p>Pipelines: Automate your build, test, and deployment processes with continuous integration and continuous deployment (CI/CD) pipelines.</p> <p>Test Plans: Plan, track, and execute manual and exploratory testing.</p> <p>Artifacts: Host and manage packages, such as NuGet and npm, and share them across your organization.</p> <p>With Azure DevOps, you can integrate with your favorite tools and frameworks, including Visual Studio, Eclipse, Jenkins, and many others. Plus, it supports a wide range of languages, platforms, and operating systems, so you can build and deploy applications regardless of your technology stack.</p> <p>Let\u2019s take a closer look at how Azure DevOps can help you streamline your software delivery pipeline:</p> <p>Faster time-to-market: By automating your delivery pipeline, you can reduce manual errors and speed up the time it takes to get your application into the hands of your customers.</p> <p>Improved collaboration: With all your tools in one place, your team can collaborate more effectively and reduce communication barriers.</p> <p>Increased visibility: With Agile boards, you can track progress and identify bottlenecks in your development process, allowing you to make data-driven decisions to improve your workflow.</p> <p>Greater quality: By integrating testing and deployment into your pipeline, you can catch bugs and issues early, leading to higher-quality software.</p> <p>Whether you\u2019re a small startup or a large enterprise, Azure DevOps can help you streamline your software delivery pipeline and improve the quality of your applications. Try it out for yourself and see how it can transform your development process.</p>"},{"location":"Important%20Basics%20of%20Azure%20DevOps/","title":"Important Basics of Azure DevOps","text":"<p>Important Basics of Azure DevOps</p> <p>Azure DevOps is a cloud-based service provided by Microsoft that offers a set of tools for software development, testing, and deployment.</p> <p>It includes a range of services such as Azure Boards, Azure Repos, Azure Test Plans, and Azure Pipelines, among others.</p> <p>Azure Boards is a project management tool that helps teams plan, track, and manage their work.</p> <p>Azure Repos is a version control system that allows teams to manage their source code.</p> <p>Azure Test Plans is a testing tool that enables teams to create and run manual and automated tests.</p> <p>Azure Pipelines is a continuous integration and continuous delivery (CI/CD) service that enables teams to build, test, and deploy their applications.</p> <p>Azure DevOps supports various programming languages and platforms such as .NET, Java, Node.js, Python, and others.</p> <p>It offers integration with other Microsoft services such as Azure, Visual Studio, and Office 365, as well as with third-party tools and services.</p> <p>Azure DevOps provides a robust security and compliance framework that includes features such as role-based access control, auditing, and compliance reporting.</p> <p>Azure DevOps pricing is based on usage, and it offers a range of plans and options to suit different needs and budgets.</p>"},{"location":"Versioncontrolwithgit/","title":"Version control with Git","text":"<p>Git is a distributed version control system, which means that each person who works on a project has their own copy of the entire project, including its history. When someone makes a change and pushes it to the central repository, everyone else can pull the changes down and merge them into their own copy of the project.</p> <p>Git is a great tool for collaboration, as it allows people to work independently on their own copies of the project and then easily merge their changes together. It also makes it easy to roll back changes if something goes wrong.</p>"},{"location":"What%20is%20Monitoring/","title":"What is Monitoring","text":"<p>Updating soon ...............</p>"},{"location":"about/","title":"Ramprasad Guduru","text":""},{"location":"about/#_1","title":"<p>","text":""},{"location":"about/#devops-engineer","title":"DevOps Engineer","text":""},{"location":"about/#summary","title":"Summary","text":"<p>I'm Ramaprasad Guduru working as a DevOps Engineer. I have Experience in Provisioning and Managing Cloud Infrastructure. Automating maintenance and regular jobs on Cloud Infrastructure. Experience handling the Entire Project Lifecycle.</p>"},{"location":"about/#customization","title":"Customization <p>extra:   analytics:     provider: google     property: !ENV GOOGLE_ANALYTICS_KEY   social:     - icon: fontawesome/brands/instagram       link: https://www.instagram.com/guduru_ramprasad_raju/</p>","text":""},{"location":"aws/","title":"AWS","text":"<p>Amazon Web Services (AWS) is the world\u2019s most comprehensive and broadly adopted cloud, offering over 200 fully featured services from data centers globally. Millions of customers\u2014including the fastest-growing startups, largest enterprises, and leading government agencies\u2014are using AWS to lower costs, become more agile, and innovate faster.</p>"},{"location":"benefitsofversioncontrol/","title":"Benefits of Version Control","text":"<p>Benefits of version control system are listed below</p> <ol> <li> <p>It is used to keep track of all the changes made in the project.</p> </li> <li> <p>It helps in reverting the changes made in the project.</p> </li> <li> <p>It helps in collaborating with other developers.</p> </li> <li> <p>It helps in managing the project effectively.</p> </li> <li> <p>It helps in tracking the bugs.</p> </li> </ol>"},{"location":"flexibility/","title":"Flexibility","text":"<p>One of the advantages provided by Git is its flexibility in several aspects:</p> <p>Track Changes - Changes can be tracked as someone making a change leaves a commit message about it.</p> <p>Backup and Restore \u2013 It helps to maintain the source code backup.</p> <p>Collaboration - It enables software team to collaborate with each other.</p> <p>Branching and Merging \u2013 Changes are made on a branch and after being approved, they can be merged with the master branch. You can see who changed the file and what parts of the content are changed.</p> <p>Deployment - It deploys the source code on the server with only one command.</p>"},{"location":"gitcommands/","title":"Git Commands","text":"Command Description <code>git init</code> Initialize a local Git repository <code>git clone repo_url</code> Clone public repository <code>git clone ssh://git@github.com/[username]/[repository]</code> Clone private repository <code>git status</code> Check status <code>git add [file-name]</code> Add a file to the staging area <code>git add -A</code> Add all new and changed files to the staging area <code>git commit -m \"[commit message]\"</code> Commit changes <code>git rm -r [file-name.txt]</code> Remove a file (or folder) <code>git branch</code> List of branches (the asterisk denotes the current branch) <code>git branch -a</code> List all branches (local and remote) <code>git branch [branch name]</code> Create a new branch <code>git branch -d [branch name]</code> Delete a branch <code>git branch -D [branch name]</code> Delete a branch forcefully <code>git push origin --delete [branch name]</code> Delete a remote branch <code>git checkout -b [branch name]</code> Create a new branch and switch to it <code>git checkout -b [branch name] origin/[branch name]</code> Clone a remote branch and switch to it <code>git branch -m [old branch name] [new branch name]</code> Rename a local branch <code>git checkout [branch name]</code> Switch to a branch <code>git checkout -</code> Switch to the branch last checked out <code>git checkout -- [file-name.txt]</code> Discard changes to a file <code>git merge [branch name]</code> Merge a branch into the active branch <code>git merge [source branch] [target branch]</code> Merge a branch into a target branch <code>git stash</code> Stash changes in a dirty working directory <code>git stash clear</code> Remove all stashed entries <code>git push origin [branch name]</code> Push a branch to your remote repository <code>git push -u origin [branch name]</code> Push changes to remote repository (and remember the branch) <code>git push</code> Push changes to remote repository (remembered branch) <code>git push origin --delete [branch name]</code> Delete a remote branch <code>git pull</code> Update local repository to the newest commit <code>git pull origin [branch name]</code> Pull changes from remote repository <code>git remote add origin ssh://git@github.com/[username]/[repository-name].git</code> Add a remote repository <code>git remote set-url origin ssh://git@github.com/[username]/[repository-name].git</code> Set a repository's origin branch to SSH <code>git log</code> View changes <code>git log --summary</code> View changes (detailed) <code>git log --oneline</code> View changes (briefly) <code>git diff [source branch] [target branch]</code> Preview changes before merging <code>git revert commitid</code> Revert commit changes <code>git config --global user.name \"your_username\"</code> Set globally Username <code>git config --global user.email \"your_email_address@example.com\"</code> Set globally Email id <code>git config --global --list</code> Get global config"},{"location":"gitfordesigners/","title":"Git for designers","text":"<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p> <p>Git is easy to learn and has a tiny footprint with lightning fast performance. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like cheap local branching, convenient staging areas, and multiple workflows.</p>"},{"location":"gitfordevelopers/","title":"Git for developers","text":"<p>Git is a distributed version control system that allows developers to track changes to files and coordinate work on those files among multiple people. Git is a popular tool for software development and has become the standard for version control in the software industry.</p> <p>Git is a powerful tool that can be used to manage software development projects of all sizes. Git allows developers to track changes to files and coordinate work on those files among multiple people. Git is a popular tool for software development and has become the standard for version control in the software industry.</p>"},{"location":"gitformarketing/","title":"Git for marketing","text":"<p>Git is a powerful tool that can help marketing, sales, and customer success teams streamline their workflows and improve their collaboration. By using Git, teams can track changes to their marketing materials, sales strategies, and customer success programs, and can easily share and collaborate on these changes with other team members. Git also makes it easy to roll back changes that are not working and to track the history of changes to files. This makes it easy to see how a marketing campaign, sales strategy, or customer success program has evolved over time, and to identify what has worked well and what has not.</p>"},{"location":"gitforproductmanagement/","title":"Git for product management","text":"<p>Git is a powerful tool that can help product managers keep track of their product roadmap and progress. With Git, product managers can easily see what features are being developed, what bugs are being fixed, and what changes are being made to the product. Additionally, Git allows product managers to easily collaborate with their team and share their product roadmap with others.</p>"},{"location":"linux/","title":"Linux","text":"Commands Description <code>cat [filename]</code> Display file\u2019s contents to the standard output device <code>cd /directorypath</code> Change to directory <code>chmod [options] mode filename</code> Change a file\u2019s permissions <code>chown [options] filename</code> Change who owns a file <code>clear</code> Clear a command line screen/window for a fresh start. <code>cp [options] source destination</code> Copy files and directories. <code>date [options]\"</code> Display or set the system date and time. <code>df [options]</code> Display used and available disk space. <code>du [options]</code> Show how much space each file takes up. <code>file [options] filename</code> Determine what type of data is within a file. <code>find [pathname] [expression]</code> Search for files matching a provided pattern. <code>grep [options] pattern [filesname]</code> Search files or output for a particular pattern. <code>kill [options] pid</code> Stop a process. If the process refuses to stop, use kill -9 pid. <code>less [options] [filename]</code> View the contents of a file one page at a time. <code>ln [options] source [destination]</code> Create a shortcut. <code>locate filename</code> Search a copy of your filesystem for the specified filename. <code>lpr [options]</code> Send a print job. <code>ls [options]</code> List directory contents. <code>man [command]</code> Display the help information for the specified command. <code>mv [options] source destination</code> Rename or move file(s) or directories. <code>passwd [name [password]]</code> Change the password or allow (for the system administrator) to change any password. <code>ps [options]</code> Display a snapshot of the currently running processes. <code>pwd</code> Display the pathname for the current directory. <code>rm [options] directory</code> Remove (delete) file(s) and/or directories. <code>rmdir [options] directory</code> Delete empty directories. <code>su [options] [user [arguments]]</code> Remotely log in to another Linux machine, over the network. Leave an ssh session by typing exit. <code>tail [options] [filename]</code> Display the last n lines of a file (the default is 10). <code>tar [options] filename</code> Store and extract files from a tarfile (.tar) or tarball (.tar.gz or .tgz). <code>top</code> Displays the resources being used on your system. Press q to exit. <code>touch filename</code> Create an empty file with the specified name. <code>who [options]</code> Display who is logged on."},{"location":"performance/","title":"Performance","text":"<p>Git stands out with its performance advantages. Performance optimized operations are branching and merging, committing new changes, and the comparison of the past versions. One of the Git performance strengths is its advanced algorithms.</p> <p>Git focuses only on the file content while determining its storage and version history of the tree. The source code files are renamed, split, and rearranged regularly. The object format of Git repository files uses a mixture of delta encoding and compression. It stores directory contents and version metadata objects.</p>"},{"location":"profile/","title":"Profile","text":""},{"location":"profile/#profile-summary","title":"Profile Summary","text":"<ul> <li>Experience in IT area comprising the configuration management, Deploy, CI/CD pipeline, AWS, and DevOps methodologies.   </li> <li>Proven experience on creates Branching and Tagging concepts in Version Control tool like GIT.</li> <li>Proven experience on Build Tools like Maven, ANT. </li> <li>Experience on building and deploying Java web applications in Apache Tomcat. </li> <li>Good experience in automating build process using Jenkins tools. </li> <li>Experience in working with Amazon Web Services (AWS), Creating EC2 Instances and configuring all web Services like EC2, S3 bucket, ELB, IAM through AWS Console. </li> <li>Worked on Dockers Including Docker Installation, Creating Images and Containers. </li> <li>Expertise in creating DevOps strategy in a mix environment of Linux (RHEL, CENTOS,) servers along with Amazon Web Services. </li> <li>Analyzing application logs in order to determine the possible cause of issues and reporting errors directly to the Dev team. </li> <li>Proven experience on continuous Build and Deployments to multiple environments like Dev, QA, Performance and UAT.</li> <li>Managed daily builds and releases to QA. Debugged build failures and worked with developers and QA people to resolve related issues. </li> <li>Experience working on several Docker components like Docker Engine, Hub, Machine, Compose and Docker Registry. Implemented docker in Development and Testing environment using docker-compose and well versed in creating customized docker images using docker file. </li> <li>Worked on Container Tool Docker and Container orchestration on Kubernetes. </li> </ul>"},{"location":"profile/#technical-skills","title":"Technical Skills","text":"<ul> <li>Operating Systems \u2013 Linux, Windows </li> <li>Cloud Platforms - AWS, AZURE, GCP Basics</li> <li>Containerization Tools \u2013 Docker,Kubernetes</li> <li>Automation \u2013 Shell Scripting, Ansible, PowerShell</li> <li>Infrastructure Provisioning \u2013 Cloud Formation, Terraform, Bicep</li> <li>Version Control Tool \u2013 GIT, Azure Repo</li> <li>Build Software \u2013 Maven</li> <li>CICD \u2013 Jenkins, Azure DevOps</li> <li>Web/App Server \u2013 Tomcat</li> <li>Static Web Development \u2013 MkDocs</li> <li>Monitoring - Cloud watch, Prometheus, Grafana</li> </ul>"},{"location":"profile/#education","title":"Education","text":"<ul> <li>M.Tech - Electronics and communication Engineering (Embedded Systems) - 2019</li> <li>B Tech \u2013 Electronics and communication Engineering \u2013 2017</li> <li>Diploma(Polytechnic) \u2013 ECE \u2013 2014</li> <li>10th class \u2013 SSC \u2013 2011</li> </ul>"},{"location":"security/","title":"Security","text":"<p>The main priority of Git is the integrity of managed source code. In Git repository, versions, directories, the content of the file, tags, and commits are secure because a cryptographically secure SHA1 hashing algorithm is used, which ensures secure code history. Git provides an authentic content history of the source code.</p>"}]}