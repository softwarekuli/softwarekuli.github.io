{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ramprasad Guduru","text":""},{"location":"#devops-engineer","title":"DevOps Engineer","text":""},{"location":"#summary","title":"Summary","text":"<p>I'm Ramaprasad Guduru working as a DevOps Engineer. I have Experience in Provisioning and Managing Cloud Infrastructure. Automating maintenance and regular jobs on Cloud Infrastructure. Experience handling the Entire Project Lifecycle.</p>"},{"location":"Azure-DevOps-Introduction/","title":"Azure-DevOps-Introduction","text":"<p>Azure DevOps includes everything you need to plan, develop, test, and deploy your applications, all in one place. Here\u2019s a quick overview of the core components:</p> <p>Boards: Use Agile boards to track work items and assign tasks to team members.</p> <p>Repos: Host your code in Git repositories and collaborate with others using pull requests and code reviews.</p> <p>Pipelines: Automate your build, test, and deployment processes with continuous integration and continuous deployment (CI/CD) pipelines.</p> <p>Test Plans: Plan, track, and execute manual and exploratory testing.</p> <p>Artifacts: Host and manage packages, such as NuGet and npm, and share them across your organization.</p> <p>With Azure DevOps, you can integrate with your favorite tools and frameworks, including Visual Studio, Eclipse, Jenkins, and many others. Plus, it supports a wide range of languages, platforms, and operating systems, so you can build and deploy applications regardless of your technology stack.</p> <p>Let\u2019s take a closer look at how Azure DevOps can help you streamline your software delivery pipeline:</p> <p>Faster time-to-market: By automating your delivery pipeline, you can reduce manual errors and speed up the time it takes to get your application into the hands of your customers.</p> <p>Improved collaboration: With all your tools in one place, your team can collaborate more effectively and reduce communication barriers.</p> <p>Increased visibility: With Agile boards, you can track progress and identify bottlenecks in your development process, allowing you to make data-driven decisions to improve your workflow.</p> <p>Greater quality: By integrating testing and deployment into your pipeline, you can catch bugs and issues early, leading to higher-quality software.</p> <p>Whether you\u2019re a small startup or a large enterprise, Azure DevOps can help you streamline your software delivery pipeline and improve the quality of your applications. Try it out for yourself and see how it can transform your development process.</p>"},{"location":"Important%20Basics%20of%20Azure%20DevOps/","title":"Important Basics of Azure DevOps","text":"<p>Important Basics of Azure DevOps</p> <p>Azure DevOps is a cloud-based service provided by Microsoft that offers a set of tools for software development, testing, and deployment.</p> <p>It includes a range of services such as Azure Boards, Azure Repos, Azure Test Plans, and Azure Pipelines, among others.</p> <p>Azure Boards is a project management tool that helps teams plan, track, and manage their work.</p> <p>Azure Repos is a version control system that allows teams to manage their source code.</p> <p>Azure Test Plans is a testing tool that enables teams to create and run manual and automated tests.</p> <p>Azure Pipelines is a continuous integration and continuous delivery (CI/CD) service that enables teams to build, test, and deploy their applications.</p> <p>Azure DevOps supports various programming languages and platforms such as .NET, Java, Node.js, Python, and others.</p> <p>It offers integration with other Microsoft services such as Azure, Visual Studio, and Office 365, as well as with third-party tools and services.</p> <p>Azure DevOps provides a robust security and compliance framework that includes features such as role-based access control, auditing, and compliance reporting.</p> <p>Azure DevOps pricing is based on usage, and it offers a range of plans and options to suit different needs and budgets.</p>"},{"location":"Monitoring-Document/","title":"Monitoring-Document","text":"<p> <p>    #  <p> **Monitoring &amp; Dashboard**   #  <p>![image](./2.png)    <p> <p>   #  <p> Table of Contents:   1. High-level monitoring architecture and Flow diagram    2. Purpose\u00a0   3. Powerapps Monitoring\u00a0   -   \u200bMetrics\u00a0   -   \u200bLogs\u00a0   -   \u200bAlerts \u00a0   -   \u200bDashboards \u00a0   -   \u200bUser activity metrics\u00a0   -   \u200bApp performance metrics\u00a0   -   \u200bData usage metrics\u00a0   -   \u200bFlow and Power Automate metrics\u00a0   -   \u200bCustom connector metrics\u00a0 \u200b\u00a0   4. Azure Resources   -   \u200bVirtual Machines \u00a0   -   \u200bAzure App Service (Web Apps, Mobile Apps, API Apps)\u00a0   -   \u200bAzure Storage (Blobs, Queues, Tables, Files)\u00a0   -   \u200bAzure Cosmos DB\u00a0   -   App Registration   -   App Configuration   -   \u200bAzure Functions\u00a0   -   \u200bAzure Active Directory\u00a0   -   \u200bAzure Service Bus (Queues, Topics)\u00a0   5. Azure DevOps   -   \u200bWork item tracking metrics\u00a0   -   \u200bAzure Devops repository metrics\u00a0   -   \u200bBuild metrics\u00a0   -   \u200bRelease metrics\u00a0   -   \u200bTestplan metrics\u00a0   -   \u200bResource utilization metrics\u00a0   -   \u200bAzure Artifacts\u00a0   #**High-Level Monitoring Architecture**   #  <p>![image](./3.png)   #**High-Level Monitoring Flow Diagram**   #  <p>![image](./6.png)   #**Process to Send Notification For Azure Resources**   #  <p>![image](./5.png)   #**Purpose**\u00a0   The purpose of monitoring PowerApps, Azure, and Azure DevOps using Azure Monitor or Insights is to gain insights into the performance, availability, and security of these critical systems and applications. Here are some specific benefits of using Azure Monitor or Insights for monitoring \u00a0   **\u200bPowerApps Monitoring:** PowerApps is a low-code platform that enables users to create custom business applications without writing code. Monitoring PowerApps with Azure Monitor or Insights can help identify issues that could impact application performance, such as long response times or errors, and optimize app performance.   **\u200bAzure Monitoring:** Azure is a cloud computing platform that provides a wide range of services for building, deploying, and managing applications and services. Monitoring Azure services with Azure Monitor or Insights can help detect and troubleshoot issues across the entire stack, including virtual machines, containers, storage, and networking.   **\u200bAzure DevOps Monitoring:** Azure DevOps is a cloud-based service that provides tools for software development, testing, and deployment. Monitoring Azure DevOps with Azure Monitor or Insights can help ensure that DevOps processes are running smoothly, identify bottlenecks and optimize processes, and track deployment success rates.In general, using Azure Monitor or Insights for monitoring provides a centralized platform for collecting and analyzing data from multiple sources, enabling organizations to gain a holistic view of their systems and applications. By monitoring and analyzing this data, organizations can proactively identify and address issues before they become\u00a0critical, optimize system performance and resource utilization, and ensure the reliability, security, and availability of their critical systems and applications.     \u200b**Here are the Power Apps tenants and environments level monitoring supported by Azure Monitor**   **Power Apps production and non-production environments**   \u200b1. Power Apps portals\u00a0   \u200b2. PowerApps Common Data Service (CDS) environments\u00a0    #**Azure Monitor provides the following types of monitoring for PowerApps environments:**    **\u200b1. Metrics** - Azure Monitor collects metrics for various resources within a PowerApps environment, such as portal page views, CDS entities, and more. These metrics can be used to creat*e custom alerts and dashboards.\u00a0   **2. Logs** - Azure Monitor can collect logs from various sources within a PowerApps environment, such as portal requests, audit logs, and more. These logs can be used for troubleshooting and analysis.\u00a0   **\u200b3. Alerts** - Azure Monitor can create alerts based on speci\ufb01c conditions in your PowerApps environment, such as when a portal page is unavailable or when a certain number of CDS requests fail.   **4. Dashboards** - Azure Monitor can create custom dashboards that provide a visual representation of metrics and logs from your PowerApps environment. These dashboards can be customized to show the information that is most important.\u00a0   **\u200bMetrics for PowerApps:**\u00a0   \u200b1. Portal page views - the number of views for each portal page.\u00a0  \u200b2. Portal unique visitors - the number of unique visitors to a portal.\u00a0  \u200b3. Portal requests - the number of requests made to a portal.\u00a0  \u200b4. Portal response time - the time it takes for a portal to respond to a request.\u00a0  \u200b5. Portal user login failures - the number of failed login attempts by portal users.\u00a0  \u200b6. CDS entity reads - the number of times a CDS entity is read.\u00a0  \u200b7. CDS entity writes - the number of times a CDS entity is written to.\u00a0  \u200b8. CDS entity deletes - the number of times a CDS entity is deleted.\u00a0  \u200b9. CDS API calls - the number of API calls made to CDS.\u00a0  \u200b10. CDS failed requests - the number of failed requests made to CDS.\u00a0   These metrics can be used to gain insights into the performance and usage of your PowerApps environment. You can use Azure Monitor to create custom alerts based on these metrics to be noti\ufb01ed when certain thresholds are reached. You can also create custom dashboards to visualize these metrics and gain a better understanding of your PowerApps environment.\u00a0   #**Azure Monitor and Azure Insights:**\u00a0  **\u200bUser activity metrics**\u00a0  \u200b\u25cf Number of active users\u00a0  \u25cf Active user trends over time\u00a0  \u200b\u25cf Number of unique sessions\u00a0  \u200b\u25cf Session duration and frequency\u00a0  \u200b\u25cf Popular apps and screen\u00a0   **\u200bApp performance metrics**\u00a0  \u200b\u25cf App load times\u00a0  \u200b\u25cf App response times\u00a0  \u200b\u25cf App crashes and error rates\u00a0  \u200b\u25cf Resource utilization (CPU, memory, disk)\u00a0  \u200b\u25cf API call duration and frequency\u00a0   **\u200bData usage metrics**\u00a0  \u200b\u25cf Number of data requests\u00a0  \u200b\u25cf Data request trends over time\u00a0  \u200b\u25cf Data request response times\u00a0\u200b\u00a0  \u200b\u25cf Data usage by app and user\u00a0  \u200b\u25cf Data usage by data source and entity\u00a0   **\u200bFlow and Power Automate metrics**\u00a0  \u200b\u25cf Number of successful and failed runs\u00a0  \u200b\u25cf Run duration and frequency\u00a0  \u200b\u25cf Flow response times\u00a0  \u200b\u25cf Number of triggers and actions\u00a0  \u200b\u25cf Flow and Power Automate errors and exceptions\u00a0   **\u200bCustom connector metrics**\u00a0  \u200b\u25cf Connector usage and adoption\u00a0  \u200b\u25cf Connector response times\u00a0  \u200b\u25cf Connector error rates\u00a0  \u200b\u25cf Custom connector performance metrics\u00a0  \u200b\u25cf Connector authorization and authentication metrics\u00a0  \u200b\u00a0 #**Azure Resources**\u00a0  *\u200bHere is a list of some of the metrics and data that can be monitored for each of the Azure resources using Azure Monitor*  **\u200b1. Virtual Machines** \u00a0  \u200b\u25cf CPU usage\u00a0  \u200b\u25cf Memory usage\u00a0  \u200b\u25cf Disk I/O\u00a0  \u200b\u25cf Network tra\ufb03c\u00a0  \u200b\u25cf Disk space utilization\u00a0  \u200b\u25cf Disk read/write operations\u00a0  \u200b\u25cf Operating system performance counters\u00a0   **2.Azure App Service (Web Apps, Mobile Apps, API Apps)**\u00a0  \u200b\u25cf Response time\u00a0  \u200b\u25cf CPU usage\u00a0  \u200b\u25cf Memory usage\u00a0  \u200b\u25cf HTTP status codes\u00a0  \u200b\u25cf Requests per second\u00a0  \u200b\u25cf Exceptions and errors\u00a0  \u200b\u25cf Performance counters from the underlying VM\u00a0  \u200b\u25cf Performance counters from the underlying VM3.\u00a0   **\u200b3. Azure Storage (Blobs, Queues, Tables, Files)**\u00a0  \u200b\u25cf Data ingress/egress\u00a0  \u200b\u25cf Transaction rates\u00a0  \u200b\u25cf Latency\u00a0  \u200b\u25cf Capacity and utilization\u00a0  \u200b\u25cf Availability\u00a0  \u200b\u25cf Failure events\u00a0   \u200b**\u200b4. Azure Event Hubs**\u00a0  \u200b\u25cf Incoming events\u00a0  \u200b\u25cf Outgoing events\u00a0  \u200b\u25cf Incoming bytes\u00a0  \u200b\u25cf Incoming and outgoing rates\u00a0  \u200b\u25cf Connection errors\u00a0  \u200b\u25cf Availability\u00a0   **5. Azure Cosmos DB**\u00a0  \u200b\u25cf Request units (RUs)\u00a0  \u200b\u25cf Storage usage\u00a0  \u200b\u25cf Availability\u00a0  \u200b\u25cf Throughput\u00a0  \u200b\u25cf Latency\u00a0  \u200b\u25cf Failed requests\u00a0   **6. Azure App Registration**  \u200b\u25cf Authentication Latency: Measures the time it takes to authenticate a user or service principal with Azure AD.    \u25cf Failed Authentication Requests: Counts the number of failed authentication requests to Azure AD.   \u25cf Successful Authentication Requests: Counts the number of successful authentication requests to Azure AD.   \u25cf API Call Rate: Measures the number of API calls per minute or per hour.    \u25cf API Response Time: Measures the time it takes for an API request to return a response.   \u25cf Application Errors: Counts the number of application errors, including failed requests and exceptions.  \u200b\u25cf Memory Usage: Measures the amount of memory used by the application.    \u25cf CPU Usage: Measures the percentage of CPU usage by the application.  \u200b\u25cf Network Traffic: Measures the amount of inbound and outbound network traffic for the application.  \u200b\u25cf Response Time: Measures the time it takes for the application to respond to a request.  **7. Azure App configuration**  \u200b\u25cf Configuration Changes: Counts the number of configuration changes made within a specified time period.  \u200b\u25cf Configuration Latency: Measures the time it takes to fetch or update a configuration setting.  \u200b\u25cf Connection Failures: Counts the number of failed connections to Azure App Configuration.  \u200b\u25cf Queries per Second: Measures the number of configuration queries per second.  \u200b\u25cf Key or Value Size: Measures the size of keys or values stored in Azure App Configuration.  \u200b\u25cf Throttled Requests: Counts the number of requests that have been throttled due to exceeding the service limits.  \u200b\u25cf Data Volume: Measures the amount of data stored in Azure App Configuration.  \u200b\u25cf Application Errors: Counts the number of application errors related to Azure App Configuration.  \u200b\u25cf Response Time: Measures the time it takes for Azure App Configuration to respond to a request.  \u200b\u25cf Throughput: Measures the number of requests per second processed by Azure App Configuration.   **\u200b7. Azure Functions**\u00a0  \u200b\u25cf Execution count\u00a0  \u200b\u25cf Execution duration\u00a0  \u200b\u25cf Failed invocations\u00a0  \u200b\u25cf CPU usage\u00a0  \u200b\u25cf Memory usage\u00a0  \u200b\u25cf Network tra\ufb03c\u00a0   **\u200b8. Azure Active Directory**\u00a0  \u200b\u25cf Sign-ins and sign-outs\u00a0  \u200b\u25cf Authentication and authorization errors\u00a0  \u200b\u25cf Role assignments and changes\u00a0  \u200b\u25cf Directory object changes\u00a0   **9. Azure Service Bus (Queues, Topics)**\u00a0  \u200b\u25cf Message ingress/egress\u00a0  \u200b\u25cf Queue/topic size and backlog\u00a0  \u200b\u25cf Active and dead-letter message counts\u00a0  \u200b\u25cf Connection errors\u00a0  \u200b\u25cf Availability\u00a0  **10. Azure KeyVault**  \u200b\u25cf Secret Access Count: Counts the number of times a secret has been accessed within a specified time period.  \u200b\u25cf Key Access Count: Counts the number of times a key has been accessed within a specified time period.  \u200b\u25cf Certificate Access Count: Counts the number of times a certificate has been accessed within a specified time period.  \u200b\u25cf Encryption and Decryption Operations: Counts the number of encryption and decryption operations performed within a specified time period.  \u200b\u25cf Key Vault Latency: Measures the time it takes to fetch or update a secret, key, or certificate in Azure Key Vault.  \u200b\u25cf Failed Operations: Counts the number of failed operations within a specified time period.  \u200b\u25cf Network Traffic: Measures the amount of inbound and outbound network traffic for Azure Key Vault.  \u200b\u25cf Request Latency: Measures the time it takes for Azure Key Vault to respond to a request.  \u200b\u25cf Unauthorized Access Attempts: Counts the number of unauthorized access attempts to Azure Key Vault.  \u200b\u25cf Authentication Errors: Counts the number of authentication errors related to Azure Key Vault.   #**\u200bAzure DevOps Monitoring** \u00a0  **\u200bWork item tracking metrics**\u00a0  \u200b\u25cf Work item cycle time\u00a0  \u200b\u25cf Work item lead time\u00a0  \u200b\u25cf Work item backlog size\u00a0  \u200b\u25cf Work item completion rate\u00a0  \u200b\u25cf Bug resolution rates\u00a0  \u200b\u25cf Feature delivery rate\u00a0  **Azure Devops repository metrics**\u00a0  \u200b\u25cf Number of commits\u00a0  \u200b\u25cf Number of pull requests\u00a0  \u200b\u25cf Merge success and failure rates\u00a0  \u200b\u25cf Merge times and durations\u00a0  \u200b\u25cf Number of branches and tags\u00a0  \u200b\u25cf Commit and merge frequency\u00a0  **Build metrics**\u00a0  \u200b\u25cf Build success and failure rates\u00a0  \u25cf Build times and durations\u00a0  \u200b\u25cf Queue time for builds\u00a0  \u200b\u25cf Average queue length\u00a0  \u200b\u25cf Number of builds in progress\u00a0  \u200b\u25cf Number of builds waiting in the queue\u00a0  \u200b\u25cf Number of builds triggered by branch or commit\u00a0  \u200b **\u200bRelease metrics**\u00a0  \u200b\u25cf Release success and failure rates\u00a0  \u200b\u25cf Release times and durations\u00a0  \u200b\u25cf Deployment frequency\u00a0  \u200b\u25cf Time to deploy\u00a0  \u200b\u25cf Average wait time for releases\u00a0  \u200b\u25cf Number of releases in progress\u00a0  \u200b\u25cf Number of releases waiting in the queue\u00a0  **Testplan metrics**\u00a0  \u25cf Test pass/fail rates\u00a0  \u200b\u25cf Test case coverage\u00a0  \u200b\u25cf Test execution times\u00a0  \u200b\u25cf Test result distribution\u00a0  \u200b\u25cf Test suite duration\u00a0   **\u200bResource utilization metrics**\u00a0  \u200b\u25cf CPU and memory usage for Azure DevOps agents and build servers\u00a0  \u200b\u25cf Disk space usage\u00a0  \u200b\u25cf Network usage\u00a0  \u200b\u25cf Connection time and rate\u00a0  **\u200bAzure Artifacts**\u00a0  \u200b*Here is the Metrics related to Azure DevOps Artifacts that can be collected and analyzed using Azure Monitor and Insights*  **\u200bPackage download metrics**\u00a0  \u200b\u25cf Number of package downloads\u00a0  \u200b\u25cf Package download rates\u00a0  \u200b\u25cf Average download size per package\u00a0  \u200b\u25cf Package download time\u00a0  \u200b\u25cf Top downloaders by IP address, user, or client\u00a0  \u200b **\u200bPackage publish metrics**\u00a0  \u200b\u25cf Number of package publishes\u00a0  \u200b\u25cf Package publish rates\u00a0  \u200b\u25cf Average publish size per package\u00a0  \u200b\u25cf Package publish time\u00a0  \u200b\u25cf Top publishers by IP address, user, or client\u00a0   **Package retention metrics**\u00a0  \u200b\u25cf Number of packages retained\u00a0  \u200b\u25cf Retention rate\u00a0  \u200b\u25cf Retention time\u00a0  \u200b\u25cf Number of packages deleted\u00a0  \u200b\u25cf Deletion rates\u00a0  \u200b\u25cf Average time to deletion\u00a0   **Package security metrics**\u00a0   \u200b\u25cf Vulnerability scan results\u00a0  \u200b\u25cf Security alerts and noti\ufb01cations\u00a0  \u200b\u25cf Number of packages with security issues\u00a0  \u200b\u25cf Package access and permission control\u00a0   #Here are some alert threshold values for commonly monitored Azure resources:   **Virtual Machines:**      \u2022 CPU Usage: Alert threshold could be set to 80% for a sustained period of time.      \u2022 Memory Usage: Alert threshold could be set to 80% for a sustained period of time.      \u2022 Disk Space Usage: Alert threshold could be set to 85% for a sustained period of time.      \u2022 Network Usage: Alert threshold could be set to 80% for a sustained period of time.      \u2022 Disk IOPS: Alert threshold could be set to 90% for a sustained period of time.  **Azure App Service:**      \u2022 CPU Utilization: 80% for sustained periods of time      \u2022 Memory Utilization: 80% for sustained periods of time      \u2022 HTTP 5xx error rate: 5% for sustained periods of time      \u2022 HTTP 4xx error rate: 10% for sustained periods of time  **Azure Storage:**      \u2022 Queue Length: 1,000 for more than 5 minutes      \u2022 Blob Capacity: 80% for sustained periods of time      \u2022 Transaction Rate: 80% for sustained periods of time      \u2022 Egress Bandwidth: 80% for sustained periods of time  **Azure Functions:**      \u2022 Execution Count: 100,000 within an hour      \u2022 Average Execution Time: 5 seconds or greater      \u2022 Memory Usage: 70% for sustained periods of time      \u2022 Exception Count: 100 within an hour      \u2022 HTTP 5xx Error Rate: 5% for sustained periods of time  **Azure App Configuration:**      \u2022 Configuration Changes: 10 configuration changes per hour      \u2022 Configuration Latency: 500 milliseconds for fetch or update operations      \u2022 Connection Failure: 5 connection failures per hour      \u2022 Queries per Second: 100 configuration queries per second      \u2022 Key or Value Size: Maximum key or value size of 1 MB  **Azure Event Hubs:**      \u2022 Incoming Messages: Alert threshold could be set to a specific number or rate of messages within a defined time period, such as 100,000 messages in 1 hour.      \u2022 Outgoing Messages: Alert threshold could be set to a specific number or rate of messages within a defined time period, such as 50,000 messages in 30 minutes.      \u2022 Active Connections: Alert threshold could be set to a specific number of active connections, such as 500 connections.      \u2022 Throttled Requests: Alert threshold could be set to the number of requests that have been throttled, such as 500 requests in 1 hour.      \u2022 Latency: Alert threshold could be set to a specific response time or average latency value, such as 500ms response time for incoming messages.  **Azure Active Directory**      \u2022 Failed Sign-In Attempts: Alert threshold could be set to a specific number of failed sign-in attempts within a defined time period, such as 10 failed attempts in 1 hour.      \u2022 Password Resets: Alert threshold could be set to the number of password resets within a defined time period, such as 50 resets in 24 hours.      \u2022 User Account Deletion: Alert threshold could be set to the number of user accounts deleted within a defined time period, such as 5 accounts in 1 day.      \u2022 Multi-Factor Authentication: Alert threshold could be set to the number of successful or unsuccessful MFA attempts, such as 100 successful or unsuccessful attempts in 1 hour.      \u2022 Directory Role Changes: Alert threshold could be set to the number of directory role changes, such as 10 changes in 1 hour.  **Azure keyvault** ``` \u2022  Key Vault Expiration: Set an alert threshold value to notify when a certificate, key or secret is about to expire, such as 30 days or 60 days before the expiration date.  \u2022  Key Vault Access: Set an alert threshold value to notify when there is an unusual amount of access to your Key Vault, such as more than 10 requests per second.  \u2022  Key Vault Authentication: Set an alert threshold value to notify when there is an unusual amount of authentication failures, such as more than 5 failed attempts in 1 hour.  \u2022  Key Vault Errors: Set an alert threshold value to notify when there is an unusual amount of errors, such as more than 10 errors per minute.  \u2022  Key Vault Latency: Set an alert threshold value to notify when there is an unusual amount of latency, such as more than 100 milliseconds for each request.   ```  #**Who should receive Azure Resources alert notifications**   -   **Virtual Machines:** Notifications can be sent to the DevOps team,     IT administrators, or security team.  -   **Azure** **App Service:** Notifications can be sent to the     development team, operations team, or project managers.  -   **Azure** **Storage:** Notifications can be sent to the operations     team, IT administrators, or security team.  -   **Azure** **Virtual Network:** Notifications can be sent to the     network administrators, security team, or IT administrators.  -   **Azure** **Key Vault:** Notifications can be sent to the security     team, operations team, or DevOps team.  -   **Azure** **Functions:** Notifications can be sent to the DevOps     team, development team, or project managers. They can be related to     issues with the Azure Functions service, such as errors in function     execution, function timeouts, or issues with function triggers.  -   **Azure** **Service Bus:** Notifications can be sent to the     operations team, IT administrators, or security team. They can be     related to issues with the Service Bus service, such as message     delivery failures, connectivity issues, or issues with authorization     and access control.  -   **Azure** **Event Grid:** Notifications can be sent to the DevOps     team, development team, or project managers. They can be related to     issues with the Event Grid service, such as event subscription     failures, event delivery issues, or issues with event schema     validation.  -   **Azure** **Notification Hubs:** Notifications can be sent to the     operations team, IT administrators, or security team. They can be     related to issues with the Notification Hubs service, such as     message delivery failures, connectivity issues, or issues with     authorization and access control.  -   **Azure** **App Registration:** Notifications can be sent to the     security team, operations team, or DevOps team. They can be related     to issues with App Registration, such as application authentication     failures, changes to application permissions, or changes to     application owners and contributors.  -   **Azure** **App Configuration:** Notifications can be sent to the     development team, operations team, or project managers. They can be     related to issues with App Configuration, such as changes to     configuration settings, changes to feature flags, or issues with     configuration data consistency and integrity.  **Cosmosdb:**  -   **Database administrators:** If there is an alert related to     database performance or availability, the database administrator(s)     should receive the alert notification.  -   **Developers:** If there is an alert related to application     performance or errors, the developers responsible for the     application should receive the alert notification.  -   **IT Operations:** If there is an alert related to infrastructure or     network issues, the IT operations team should receive the alert     notification.  -   **Security personnel:** If there is an alert related to security     events or breaches, the security personnel should receive the alert     notification.  #**Who should receive Azure DevOps alert notifications**   -   **Project administrators:** If there is an alert related to project     settings, permissions, or access in Azure DevOps, the project     administrators should receive the alert notification.  -   **Developers:** If there is an alert related to build or release     failures, code quality issues, or code changes in Azure DevOps, the     developers responsible for the code should receive the alert     notification.  -   **IT Operations:** If there is an alert related to infrastructure or     network issues affecting the Azure DevOps service, the IT operations     team should receive the alert notification.  -   **Security personnel:** If there is an alert related to security     events or breaches in Azure DevOps, the security personnel should     receive the alert notification.  -   **Testers:** If there is an alert related to test failures or issues     in Azure DevOps, the testers responsible for the tests should     receive the alert notification.  -   **Scrum masters or Agile coaches:** If there is an alert related to     the progress or status of a sprint or agile project in Azure DevOps,     the scrum masters or agile coaches should receive the alert     notification.  -   **Product owners or stakeholders:** If there is an alert related to     a change or update in a product or feature in Azure DevOps, the     product owners or stakeholders should receive the alert     notification.  -   **Support team:** If there is an alert related to customer-reported     issues or bugs in Azure DevOps, the support team should receive the     alert notification.  -   **Operations team:** If there is an alert related to server or     application monitoring, the operations team should receive the alert     notification.  -   **Database administrators:** If there is an alert related to     database performance, capacity, or availability issues in Azure     DevOps, the database administrators should receive the alert     notification.  -   **Business analysts:** If there is an alert related to data     analytics, insights or reporting in Azure DevOps, the business     analysts should receive the alert notification.  -   **Compliance team:** If there is an alert related to compliance     violations or issues in Azure DevOps, the compliance team should     receive the alert notification.  -   **Disaster recovery team:** If there is an alert related to disaster     recovery, backup or restore issues in Azure DevOps, the disaster     recovery team should receive the alert notification  -   **Incident response team:** If there is an alert related to security     or operational incidents in Azure DevOps, the incident response team     should receive the alert notification.  #**Who should receive PowerApps tenant or Environmrnts alert notifications**   -   **PowerApps** **administrators:** If there is an alert related to     the availability or performance of the PowerApps service, the     PowerApps administrators should receive the alert notification.  -   **Developers:** If there is an alert related to custom code or     functionality in PowerApps, the developers responsible for the code     should receive the alert notification.  -   **IT Operations:** If there is an alert related to infrastructure or     network issues affecting the PowerApps service, the IT operations     team should receive the alert notification.  -   **Security personnel:** If there is an alert related to security     events or breaches in PowerApps, the security personnel should     receive the alert notification.  **How to Integrate alerts for all Azure resources.**  &gt; **Here are the high-level steps to integrate alerts for all Azure resources using Azure Monitor:**  **Create an Azure Monitor resource:** First, you need to create an Azure Monitor resource in your Azure subscription. This resource acts as a central repository for all your monitoring data.  **Enable Azure Monitor on all resources:** Next, you need to enable Azure Monitor on all Azure resources that you want to monitor. This can be done using Azure Policy or by using Azure Resource Manager templates.  **Configure data sources:** Once you have enabled Azure Monitor on all resources, you can configure the data sources that you want to monitor. This can include Azure resources like virtual machines, Azure App Service, Azure Storage, Azure SQL, and many others.  **Create alerts:** After configuring the data sources, you can create alerts that are triggered based on certain conditions or thresholds. For example, you can create an alert that triggers when the CPU usage of a virtual machine exceeds a certain percentage.  **Define alert criteria:** You can define the criteria for when an alert should be triggered, such as thresholds, time periods, and severity levels.  **Configure notification channels:** Finally, you can configure notification channels for your alerts, such as email, SMS, or webhook. This ensures that the right people are notified when an alert is triggered.  **Customize alerts:** Azure Monitor allows you to customize alerts by defining complex conditions, using log queries, and creating multi-dimensional alerts that combine different metrics and data sources.  **Analyze alert data:** Azure Monitor provides rich analytics capabilities that allow you to analyze alert data, identify trends, and gain insights into your Azure environment. You can use log queries, visualizations, and machine learning algorithms to analyze your data and optimize your alert configuration.  **Automate remediation:** Azure Monitor also allows you to automate remediation actions, such as restarting a virtual machine, scaling out an application, or executing a runbook in Azure Automation. By automating remediation, you can minimize downtime and reduce the impact of issues on your applications and services.  **Monitor third-party services:** Azure Monitor can also be used to monitor third-party services and applications running outside of Azure. This can be done by integrating Azure Monitor with external monitoring solutions, such as Nagios or Zabbix, or by using Azure Monitor\\'s extensibility framework to create custom monitoring solutions.  # How to Integrate alerts for Powerapps Tenants, Environments and dataverse  1. Log in to the Power Platform Admin center () with your admin credentials.  2. From the left-hand navigation pane, select \\\"Environments\\\".  3. Select the environment that you want to configure alerts for.  4. Click on \\\"Settings\\\" in the top menu bar, and select \\\"Alerts\\\" from the dropdown menu.  5. Click on \\\"Add alert rule\\\" to create a new alert rule.  6. In the \\\"Add alert rule\\\" dialog box, enter a name for the alert rule, and select the severity level for the alert.  7. Choose the type of resource you want to monitor by selecting the appropriate option from the \\\"Resource type\\\" dropdown list. You can choose from Power Apps, Power Automate, or Dataverse.  8. Select the specific resource that you want to monitor from the \\\"Resource\\\" dropdown list. For example, if you selected Power Apps as the resource type, you can select a specific app to monitor.  9. Select the conditions that will trigger the alert. You can choose from a variety of conditions, such as when the resource reaches a certain threshold of usage, when a specific action is performed, or when an error occurs.  10. Choose the action that will be taken when the alert is triggered. You can choose to receive an email notification, a text message, or a push notification to your mobile device.  11. Click \\\"Save\\\" to save the alert rule.  12. Once the alert rule is saved, you can view it in the \\\"Alert rules\\\" section of the environment\\'s settings.  13. You can also edit or delete existing alert rules by selecting them from the \\\"Alert rules\\\" section and clicking on the appropriate button.  #**How to Integrate alerts for Azure DevOps**  1.  Log in to the Azure DevOps portal () with     your credentials.  2.  In the left-hand navigation pane, select the project for which you     want to configure alerts.  3.  Click on the \\\"Project settings\\\" gear icon in the bottom left     corner of the screen.  4.  Select \\\"Notifications\\\" under the \\\"General\\\" tab.  5.  Click on the \\\"New Subscription\\\" button to create a new alert     subscription.  6.  Choose the type of events that you want to receive alerts for. You     can select from a variety of events, such as when a work item is     created or updated, when a build completes, or when a pull request     is merged.  7.  Select the target for the alert. You can choose to send the alert to     a specific email address, to a group of email addresses, or to a     webhook URL.  8.  Configure the details of the alert subscription. Depending on the     type of event you selected, you may be asked to provide additional     information, such as the type of work item or build pipeline to     monitor.  9.  Click on the \\\"Create\\\" button to create the alert subscription.  10. Once the alert subscription is created, you can view and manage it     under the \\\"Notifications\\\" tab.  11. You can edit or delete existing alert subscriptions by selecting     them from the list and clicking on the appropriate button."},{"location":"Versioncontrolwithgit/","title":"Version control with Git","text":"<p>Git is a distributed version control system, which means that each person who works on a project has their own copy of the entire project, including its history. When someone makes a change and pushes it to the central repository, everyone else can pull the changes down and merge them into their own copy of the project.</p> <p>Git is a great tool for collaboration, as it allows people to work independently on their own copies of the project and then easily merge their changes together. It also makes it easy to roll back changes if something goes wrong.</p>"},{"location":"about/","title":"Ramprasad Guduru","text":""},{"location":"about/#devops-engineer","title":"DevOps Engineer","text":""},{"location":"about/#summary","title":"Summary","text":"<p>I'm Ramaprasad Guduru working as a DevOps Engineer. I have Experience in Provisioning and Managing Cloud Infrastructure. Automating maintenance and regular jobs on Cloud Infrastructure. Experience handling the Entire Project Lifecycle.</p>"},{"location":"about/#customization","title":"Customization","text":"<p>extra:   analytics:     provider: google     property: !ENV GOOGLE_ANALYTICS_KEY   social:     - icon: fontawesome/brands/instagram       link: https://www.instagram.com/guduru_ramprasad_raju/</p>"},{"location":"benefitsofversioncontrol/","title":"Benefits of Version Control","text":"<p>Benefits of version control system are listed below</p> <ol> <li> <p>It is used to keep track of all the changes made in the project.</p> </li> <li> <p>It helps in reverting the changes made in the project.</p> </li> <li> <p>It helps in collaborating with other developers.</p> </li> <li> <p>It helps in managing the project effectively.</p> </li> <li> <p>It helps in tracking the bugs.</p> </li> </ol>"},{"location":"flexibility/","title":"Flexibility","text":"<p>One of the advantages provided by Git is its flexibility in several aspects:</p> <p>Track Changes - Changes can be tracked as someone making a change leaves a commit message about it.</p> <p>Backup and Restore \u2013 It helps to maintain the source code backup.</p> <p>Collaboration - It enables software team to collaborate with each other.</p> <p>Branching and Merging \u2013 Changes are made on a branch and after being approved, they can be merged with the master branch. You can see who changed the file and what parts of the content are changed.</p> <p>Deployment - It deploys the source code on the server with only one command.</p>"},{"location":"gitcommands/","title":"Git Commands","text":"Command Description <code>git init</code> Initialize a local Git repository <code>git clone repo_url</code> Clone public repository <code>git clone ssh://git@github.com/[username]/[repository]</code> Clone private repository <code>git status</code> Check status <code>git add [file-name]</code> Add a file to the staging area <code>git add -A</code> Add all new and changed files to the staging area <code>git commit -m \"[commit message]\"</code> Commit changes <code>git rm -r [file-name.txt]</code> Remove a file (or folder) <code>git branch</code> List of branches (the asterisk denotes the current branch) <code>git branch -a</code> List all branches (local and remote) <code>git branch [branch name]</code> Create a new branch <code>git branch -d [branch name]</code> Delete a branch <code>git branch -D [branch name]</code> Delete a branch forcefully <code>git push origin --delete [branch name]</code> Delete a remote branch <code>git checkout -b [branch name]</code> Create a new branch and switch to it <code>git checkout -b [branch name] origin/[branch name]</code> Clone a remote branch and switch to it <code>git branch -m [old branch name] [new branch name]</code> Rename a local branch <code>git checkout [branch name]</code> Switch to a branch <code>git checkout -</code> Switch to the branch last checked out <code>git checkout -- [file-name.txt]</code> Discard changes to a file <code>git merge [branch name]</code> Merge a branch into the active branch <code>git merge [source branch] [target branch]</code> Merge a branch into a target branch <code>git stash</code> Stash changes in a dirty working directory <code>git stash clear</code> Remove all stashed entries <code>git push origin [branch name]</code> Push a branch to your remote repository <code>git push -u origin [branch name]</code> Push changes to remote repository (and remember the branch) <code>git push</code> Push changes to remote repository (remembered branch) <code>git push origin --delete [branch name]</code> Delete a remote branch <code>git pull</code> Update local repository to the newest commit <code>git pull origin [branch name]</code> Pull changes from remote repository <code>git remote add origin ssh://git@github.com/[username]/[repository-name].git</code> Add a remote repository <code>git remote set-url origin ssh://git@github.com/[username]/[repository-name].git</code> Set a repository's origin branch to SSH <code>git log</code> View changes <code>git log --summary</code> View changes (detailed) <code>git log --oneline</code> View changes (briefly) <code>git diff [source branch] [target branch]</code> Preview changes before merging <code>git revert commitid</code> Revert commit changes <code>git config --global user.name \"your_username\"</code> Set globally Username <code>git config --global user.email \"your_email_address@example.com\"</code> Set globally Email id <code>git config --global --list</code> Get global config"},{"location":"gitfordesigners/","title":"Git for designers","text":"<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p> <p>Git is easy to learn and has a tiny footprint with lightning fast performance. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like cheap local branching, convenient staging areas, and multiple workflows.</p>"},{"location":"gitfordevelopers/","title":"Git for developers","text":"<p>Git is a distributed version control system that allows developers to track changes to files and coordinate work on those files among multiple people. Git is a popular tool for software development and has become the standard for version control in the software industry.</p> <p>Git is a powerful tool that can be used to manage software development projects of all sizes. Git allows developers to track changes to files and coordinate work on those files among multiple people. Git is a popular tool for software development and has become the standard for version control in the software industry.</p>"},{"location":"gitformarketing/","title":"Git for marketing","text":"<p>Git is a powerful tool that can help marketing, sales, and customer success teams streamline their workflows and improve their collaboration. By using Git, teams can track changes to their marketing materials, sales strategies, and customer success programs, and can easily share and collaborate on these changes with other team members. Git also makes it easy to roll back changes that are not working and to track the history of changes to files. This makes it easy to see how a marketing campaign, sales strategy, or customer success program has evolved over time, and to identify what has worked well and what has not.</p>"},{"location":"gitforproductmanagement/","title":"Git for product management","text":"<p>Git is a powerful tool that can help product managers keep track of their product roadmap and progress. With Git, product managers can easily see what features are being developed, what bugs are being fixed, and what changes are being made to the product. Additionally, Git allows product managers to easily collaborate with their team and share their product roadmap with others.</p>"},{"location":"linux/","title":"Linux","text":"Commands Description <code>cat [filename]</code> Display file\u2019s contents to the standard output device <code>cd /directorypath</code> Change to directory <code>chmod [options] mode filename</code> Change a file\u2019s permissions <code>chown [options] filename</code> Change who owns a file <code>clear</code> Clear a command line screen/window for a fresh start. <code>cp [options] source destination</code> Copy files and directories. <code>date [options]\"</code> Display or set the system date and time. <code>df [options]</code> Display used and available disk space. <code>du [options]</code> Show how much space each file takes up. <code>file [options] filename</code> Determine what type of data is within a file. <code>find [pathname] [expression]</code> Search for files matching a provided pattern. <code>grep [options] pattern [filesname]</code> Search files or output for a particular pattern. <code>kill [options] pid</code> Stop a process. If the process refuses to stop, use kill -9 pid. <code>less [options] [filename]</code> View the contents of a file one page at a time. <code>ln [options] source [destination]</code> Create a shortcut. <code>locate filename</code> Search a copy of your filesystem for the specified filename. <code>lpr [options]</code> Send a print job. <code>ls [options]</code> List directory contents. <code>man [command]</code> Display the help information for the specified command. <code>mv [options] source destination</code> Rename or move file(s) or directories. <code>passwd [name [password]]</code> Change the password or allow (for the system administrator) to change any password. <code>ps [options]</code> Display a snapshot of the currently running processes. <code>pwd</code> Display the pathname for the current directory. <code>rm [options] directory</code> Remove (delete) file(s) and/or directories. <code>rmdir [options] directory</code> Delete empty directories. <code>su [options] [user [arguments]]</code> Remotely log in to another Linux machine, over the network. Leave an ssh session by typing exit. <code>tail [options] [filename]</code> Display the last n lines of a file (the default is 10). <code>tar [options] filename</code> Store and extract files from a tarfile (.tar) or tarball (.tar.gz or .tgz). <code>top</code> Displays the resources being used on your system. Press q to exit. <code>touch filename</code> Create an empty file with the specified name. <code>who [options]</code> Display who is logged on."},{"location":"performance/","title":"Performance","text":"<p>Git stands out with its performance advantages. Performance optimized operations are branching and merging, committing new changes, and the comparison of the past versions. One of the Git performance strengths is its advanced algorithms.</p> <p>Git focuses only on the file content while determining its storage and version history of the tree. The source code files are renamed, split, and rearranged regularly. The object format of Git repository files uses a mixture of delta encoding and compression. It stores directory contents and version metadata objects.</p>"},{"location":"profile/","title":"Profile","text":""},{"location":"profile/#profile-summary","title":"Profile Summary","text":"<ul> <li>Experience in IT area comprising the configuration management, Deploy, CI/CD pipeline, AWS, and DevOps methodologies.   </li> <li>Proven experience on creates Branching and Tagging concepts in Version Control tool like GIT.</li> <li>Proven experience on Build Tools like Maven, ANT. </li> <li>Experience on building and deploying Java web applications in Apache Tomcat. </li> <li>Good experience in automating build process using Jenkins tools. </li> <li>Experience in working with Amazon Web Services (AWS), Creating EC2 Instances and configuring all web Services like EC2, S3 bucket, ELB, IAM through AWS Console. </li> <li>Worked on Dockers Including Docker Installation, Creating Images and Containers. </li> <li>Expertise in creating DevOps strategy in a mix environment of Linux (RHEL, CENTOS,) servers along with Amazon Web Services. </li> <li>Analyzing application logs in order to determine the possible cause of issues and reporting errors directly to the Dev team. </li> <li>Proven experience on continuous Build and Deployments to multiple environments like Dev, QA, Performance and UAT.</li> <li>Managed daily builds and releases to QA. Debugged build failures and worked with developers and QA people to resolve related issues. </li> <li>Experience working on several Docker components like Docker Engine, Hub, Machine, Compose and Docker Registry. Implemented docker in Development and Testing environment using docker-compose and well versed in creating customized docker images using docker file. </li> <li>Worked on Container Tool Docker and Container orchestration on Kubernetes. </li> </ul>"},{"location":"profile/#technical-skills","title":"Technical Skills","text":"<ul> <li>Operating Systems \u2013 Linux, Windows </li> <li>Cloud Platforms - AWS, AZURE, GCP Basics</li> <li>Containerization Tools \u2013 Docker,Kubernetes</li> <li>Automation \u2013 Shell Scripting, Ansible, PowerShell</li> <li>Infrastructure Provisioning \u2013 Cloud Formation, Terraform, Bicep</li> <li>Version Control Tool \u2013 GIT, Azure Repo</li> <li>Build Software \u2013 Maven</li> <li>CICD \u2013 Jenkins, Azure DevOps</li> <li>Web/App Server \u2013 Tomcat</li> <li>Static Web Development \u2013 MkDocs</li> <li>Monitoring - Cloud watch, Prometheus, Grafana</li> </ul>"},{"location":"profile/#education","title":"Education","text":"<ul> <li>M.Tech - Electronics and communication Engineering (Embedded Systems) - 2019</li> <li>B Tech \u2013 Electronics and communication Engineering \u2013 2017</li> <li>Diploma(Polytechnic) \u2013 ECE \u2013 2014</li> <li>10th class \u2013 SSC \u2013 2011</li> </ul>"},{"location":"security/","title":"Security","text":"<p>The main priority of Git is the integrity of managed source code. In Git repository, versions, directories, the content of the file, tags, and commits are secure because a cryptographically secure SHA1 hashing algorithm is used, which ensures secure code history. Git provides an authentic content history of the source code.</p>"},{"location":"AWS/List%20of%20Aws%20Services/","title":"List of AWS Services","text":"<ol> <li> <p>Amazon Elastic Compute Cloud (EC2)</p> </li> <li> <p>Amazon Simple Storage Service (S3)</p> </li> <li> <p>Amazon Relational Database Service (RDS)</p> </li> <li> <p>Amazon Elastic Block Store (EBS)</p> </li> <li> <p>Amazon Virtual Private Cloud (VPC)</p> </li> <li> <p>Amazon CloudFront</p> </li> <li> <p>AWS Lambda</p> </li> <li> <p>Amazon Simple Queue Service (SQS)</p> </li> <li> <p>Amazon Simple Notification Service (SNS)</p> </li> <li> <p>Amazon Simple Email Service (SES)</p> </li> <li> <p>Amazon Elastic Load Balancer (ELB)</p> </li> <li> <p>Amazon CloudWatch</p> </li> <li> <p>Amazon CloudFormation</p> </li> <li> <p>Amazon Simple Workflow Service (SWF)</p> </li> <li> <p>Amazon Elastic MapReduce (EMR)</p> </li> <li> <p>AWS Identity and Access Management (IAM)</p> </li> <li> <p>Amazon Route 53</p> </li> <li> <p>AWS Direct Connect</p> </li> <li> <p>Amazon Elastic Container Service (ECS)</p> </li> <li> <p>AWS Elastic Beanstalk</p> </li> <li> <p>AWS CloudTrail</p> </li> <li> <p>Amazon SimpleDB</p> </li> <li> <p>Amazon DynamoDB</p> </li> <li> <p>Amazon Aurora</p> </li> <li> <p>Amazon Redshift</p> </li> <li> <p>AWS Elastic Transcoder</p> </li> <li> <p>Amazon Kinesis</p> </li> <li> <p>Amazon Glacier</p> </li> <li> <p>AWS Key Management Service (KMS)</p> </li> <li> <p>AWS Glue</p> </li> <li> <p>Amazon CloudSearch</p> </li> <li> <p>Amazon SimpleDB</p> </li> <li> <p>AWS Batch</p> </li> <li> <p>Amazon Elastic File System (EFS)</p> </li> <li> <p>Amazon WorkSpaces</p> </li> <li> <p>AWS CodeCommit</p> </li> <li> <p>AWS CodePipeline</p> </li> <li> <p>AWS CodeBuild</p> </li> <li> <p>AWS CodeDeploy</p> </li> <li> <p>AWS CodeStar</p> </li> <li> <p>Amazon AppStream</p> </li> <li> <p>AWS Snowball</p> </li> <li> <p>AWS Snowball Edge</p> </li> <li> <p>AWS Snowmobile</p> </li> <li> <p>Amazon Elastic Container Registry (ECR)</p> </li> <li> <p>AWS OpsWorks</p> </li> <li> <p>AWS Step Functions</p> </li> <li> <p>AWS Data Pipeline</p> </li> <li> <p>AWS IoT</p> </li> <li> <p>AWS IoT Core</p> </li> </ol> <p>Refference Link 'Aws services list'</p>"},{"location":"AWS/aws/","title":"AWS","text":""},{"location":"AWS/aws/#here-are-the-steps-to-create-an-aws","title":"Here are the steps to create an AWS :","text":"<ol> <li>Visit the AWS website: AWS Website 'Aws portal Link'</li> <li>Click on the \"Create an AWS Account\" button.</li> <li>Fill in your email address and create a password for your AWS account.</li> <li>Provide your contact information, including your name and phone number.</li> <li>Enter your company or personal information, such as your company name or your full name if you're signing up as an individual.</li> <li>Provide your payment information. AWS requires a valid credit card to create an account, although some services offer a free tier.</li> <li>Read and accept the AWS Customer Agreement.</li> <li>Choose a support plan. AWS offers different levels of support, including a free plan with basic support and paid plans with more advanced support options.</li> <li>Complete the identity verification process. This may involve receiving a phone call or entering a verification code sent to your email or phone number.</li> <li>Set up your billing preferences, including your billing address and whether you want to receive invoices via email or through the AWS Management Console.</li> <li>Review your account details and confirm your account creation.</li> <li>You will receive a confirmation email from AWS with further instructions.</li> <li>Follow the instructions in the email to activate your AWS account.</li> </ol> <p>Congratulations! You have successfully created an AWS account. You can now log in to the AWS Management Console and start using AWS services and resources.</p>"}]}