{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ramprasad Guduru DevOps Engineer Summary I'm Ramaprasad Guduru working as a DevOps Engineer. I have Experience in Provisioning and Managing Cloud Infrastructure. Automating maintenance and regular jobs on Cloud Infrastructure. Experience handling the Entire Project Lifecycle.","title":"Home"},{"location":"#ramprasad-guduru","text":"","title":"Ramprasad Guduru "},{"location":"#devops-engineer","text":"","title":"DevOps Engineer"},{"location":"#summary","text":"I'm Ramaprasad Guduru working as a DevOps Engineer. I have Experience in Provisioning and Managing Cloud Infrastructure. Automating maintenance and regular jobs on Cloud Infrastructure. Experience handling the Entire Project Lifecycle.","title":"Summary"},{"location":"Versioncontrolwithgit/","text":"Git is a distributed version control system, which means that each person who works on a project has their own copy of the entire project, including its history. When someone makes a change and pushes it to the central repository, everyone else can pull the changes down and merge them into their own copy of the project. Git is a great tool for collaboration, as it allows people to work independently on their own copies of the project and then easily merge their changes together. It also makes it easy to roll back changes if something goes wrong.","title":"Version control with Git"},{"location":"about/","text":"Ramprasad Guduru DevOps Engineer Summary I'm Ramaprasad Guduru working as a DevOps Engineer. I have Experience in Provisioning and Managing Cloud Infrastructure. Automating maintenance and regular jobs on Cloud Infrastructure. Experience handling the Entire Project Lifecycle. Customization extra: analytics: provider: google property: !ENV GOOGLE_ANALYTICS_KEY social: - icon: fontawesome/brands/instagram link: https://www.instagram.com/guduru_ramprasad_raju/","title":"About"},{"location":"about/#ramprasad-guduru","text":"","title":"Ramprasad Guduru "},{"location":"about/#devops-engineer","text":"","title":"DevOps Engineer"},{"location":"about/#summary","text":"I'm Ramaprasad Guduru working as a DevOps Engineer. I have Experience in Provisioning and Managing Cloud Infrastructure. Automating maintenance and regular jobs on Cloud Infrastructure. Experience handling the Entire Project Lifecycle.","title":"Summary"},{"location":"about/#customization","text":"extra: analytics: provider: google property: !ENV GOOGLE_ANALYTICS_KEY social: - icon: fontawesome/brands/instagram link: https://www.instagram.com/guduru_ramprasad_raju/","title":"Customization"},{"location":"aws/","text":"","title":"AWS"},{"location":"benefitsofversioncontrol/","text":"Benefits of version control system are listed below It is used to keep track of all the changes made in the project. It helps in reverting the changes made in the project. It helps in collaborating with other developers. It helps in managing the project effectively. It helps in tracking the bugs.","title":"Benefits of Version Control"},{"location":"docker/","text":"","title":"Docker"},{"location":"flexibility/","text":"One of the advantages provided by Git is its flexibility in several aspects: Track Changes - Changes can be tracked as someone making a change leaves a commit message about it. Backup and Restore \u2013 It helps to maintain the source code backup. Collaboration - It enables software team to collaborate with each other. Branching and Merging \u2013 Changes are made on a branch and after being approved, they can be merged with the master branch. You can see who changed the file and what parts of the content are changed. Deployment - It deploys the source code on the server with only one command.","title":"Flexibility"},{"location":"gitcommands/","text":"Command Description git init Initialize a local Git repository git clone repo_url Clone public repository git clone ssh://git@github.com/[username]/[repository] Clone private repository git status Check status git add [file-name] Add a file to the staging area git add -A Add all new and changed files to the staging area git commit -m \"[commit message]\" Commit changes git rm -r [file-name.txt] Remove a file (or folder) git branch List of branches (the asterisk denotes the current branch) git branch -a List all branches (local and remote) git branch [branch name] Create a new branch git branch -d [branch name] Delete a branch git branch -D [branch name] Delete a branch forcefully git push origin --delete [branch name] Delete a remote branch git checkout -b [branch name] Create a new branch and switch to it git checkout -b [branch name] origin/[branch name] Clone a remote branch and switch to it git branch -m [old branch name] [new branch name] Rename a local branch git checkout [branch name] Switch to a branch git checkout - Switch to the branch last checked out git checkout -- [file-name.txt] Discard changes to a file git merge [branch name] Merge a branch into the active branch git merge [source branch] [target branch] Merge a branch into a target branch git stash Stash changes in a dirty working directory git stash clear Remove all stashed entries git push origin [branch name] Push a branch to your remote repository git push -u origin [branch name] Push changes to remote repository (and remember the branch) git push Push changes to remote repository (remembered branch) git push origin --delete [branch name] Delete a remote branch git pull Update local repository to the newest commit git pull origin [branch name] Pull changes from remote repository git remote add origin ssh://git@github.com/[username]/[repository-name].git Add a remote repository git remote set-url origin ssh://git@github.com/[username]/[repository-name].git Set a repository's origin branch to SSH git log View changes git log --summary View changes (detailed) git log --oneline View changes (briefly) git diff [source branch] [target branch] Preview changes before merging git revert commitid Revert commit changes git config --global user.name \"your_username\" Set globally Username git config --global user.email \"your_email_address@example.com\" Set globally Email id git config --global --list Get global config","title":"Git Commands"},{"location":"gitfordesigners/","text":"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like cheap local branching, convenient staging areas, and multiple workflows.","title":"Git for designers"},{"location":"gitfordevelopers/","text":"Git is a distributed version control system that allows developers to track changes to files and coordinate work on those files among multiple people. Git is a popular tool for software development and has become the standard for version control in the software industry. Git is a powerful tool that can be used to manage software development projects of all sizes. Git allows developers to track changes to files and coordinate work on those files among multiple people. Git is a popular tool for software development and has become the standard for version control in the software industry.","title":"Git for developers"},{"location":"gitformarketing/","text":"Git is a powerful tool that can help marketing, sales, and customer success teams streamline their workflows and improve their collaboration. By using Git, teams can track changes to their marketing materials, sales strategies, and customer success programs, and can easily share and collaborate on these changes with other team members. Git also makes it easy to roll back changes that are not working and to track the history of changes to files. This makes it easy to see how a marketing campaign, sales strategy, or customer success program has evolved over time, and to identify what has worked well and what has not.","title":"Git for marketing"},{"location":"gitforproductmanagement/","text":"Git is a powerful tool that can help product managers keep track of their product roadmap and progress. With Git, product managers can easily see what features are being developed, what bugs are being fixed, and what changes are being made to the product. Additionally, Git allows product managers to easily collaborate with their team and share their product roadmap with others.","title":"Git for product management"},{"location":"jenkins/","text":"","title":"Jenkins"},{"location":"linux-commands/","text":"Commands Description cat [filename] Display file\u2019s contents to the standard output device cd /directorypath Change to directory chmod [options] mode filename Change a file\u2019s permissions chown [options] filename Change who owns a file clear Clear a command line screen/window for a fresh start. cp [options] source destination Copy files and directories. date [options]\" Display or set the system date and time. df [options] Display used and available disk space. du [options] Show how much space each file takes up. file [options] filename Determine what type of data is within a file. find [pathname] [expression] Search for files matching a provided pattern. grep [options] pattern [filesname] Search files or output for a particular pattern. kill [options] pid Stop a process. If the process refuses to stop, use kill -9 pid. less [options] [filename] View the contents of a file one page at a time. ln [options] source [destination] Create a shortcut. locate filename Search a copy of your filesystem for the specified filename. lpr [options] Send a print job. ls [options] List directory contents. man [command] Display the help information for the specified command. mv [options] source destination Rename or move file(s) or directories. passwd [name [password]] Change the password or allow (for the system administrator) to change any password. ps [options] Display a snapshot of the currently running processes. pwd Display the pathname for the current directory. rm [options] directory Remove (delete) file(s) and/or directories. rmdir [options] directory Delete empty directories. su [options] [user [arguments]] Remotely log in to another Linux machine, over the network. Leave an ssh session by typing exit. tail [options] [filename] Display the last n lines of a file (the default is 10). tar [options] filename Store and extract files from a tarfile (.tar) or tarball (.tar.gz or .tgz). top Displays the resources being used on your system. Press q to exit. touch filename Create an empty file with the specified name. who [options] Display who is logged on.","title":"Linux commands"},{"location":"linux/","text":"what is OS/Operating system ? Os is an operating system, it is a collection of programs and interfaces between the user and computer hardware. Types of OS in the market: Windows 11 /10, Linux(Amazon Linux, RHEL), Ubuntu, CentOs. RHEL8(Say using this os flavor in the interview) in every Os we have two interfaces: 1. GUI ( Graphical user interface) 2. CLI ( Command line Interface) Physical Resouces: Ram, CPU, Hard disk. *User: The user is the one who accesses the data or stores the data, he/she has more control over the OS. *Shell: Shell is a command translator, very first when the user executes any command first request will go to the shell, which will translate the user's request into machine language (01) *Kernel: Kernel is the heart of os, which contain os source code and parameters information. the complete input and output transaction will happen through kernel. The kernel won't understand human language so the shell will translate user requests into machines. *Hardware: It contains Physical Resouces like Ram, CPU, and Hard disk (our data will be present). Introduction and Features of Linux Linux was started around 1991 by Linus Torvalds. Linux is a multi-user, multi-tasking Operating system. Linux is open source ( Source code ) Redhat Linux, AIX, Ubuntu. Linux is case-sensitive (lowercase) eg: ls, cd Popular Linux Distribution in the Market: Redhat Linux 2.CentOs Ubuntu Suse Linux Fedora Debian Amazon Linux After installing Os we will get IP, username, and password. The minimum requirement to login into the server(Linux, windows ) is ---> IP address, username, and password.","title":"Basics of Linux"},{"location":"linux/#what-is-osoperating-system","text":"Os is an operating system, it is a collection of programs and interfaces between the user and computer hardware. Types of OS in the market: Windows 11 /10, Linux(Amazon Linux, RHEL), Ubuntu, CentOs. RHEL8(Say using this os flavor in the interview) in every Os we have two interfaces: 1. GUI ( Graphical user interface) 2. CLI ( Command line Interface) Physical Resouces: Ram, CPU, Hard disk. *User: The user is the one who accesses the data or stores the data, he/she has more control over the OS. *Shell: Shell is a command translator, very first when the user executes any command first request will go to the shell, which will translate the user's request into machine language (01) *Kernel: Kernel is the heart of os, which contain os source code and parameters information. the complete input and output transaction will happen through kernel. The kernel won't understand human language so the shell will translate user requests into machines. *Hardware: It contains Physical Resouces like Ram, CPU, and Hard disk (our data will be present).","title":"what is OS/Operating system ?"},{"location":"linux/#introduction-and-features-of-linux","text":"Linux was started around 1991 by Linus Torvalds. Linux is a multi-user, multi-tasking Operating system. Linux is open source ( Source code ) Redhat Linux, AIX, Ubuntu. Linux is case-sensitive (lowercase) eg: ls, cd","title":"Introduction and Features of Linux"},{"location":"linux/#popular-linux-distribution-in-the-market","text":"Redhat Linux 2.CentOs Ubuntu Suse Linux Fedora Debian Amazon Linux After installing Os we will get IP, username, and password. The minimum requirement to login into the server(Linux, windows ) is ---> IP address, username, and password.","title":"Popular Linux Distribution in the Market:"},{"location":"performance/","text":"Git stands out with its performance advantages. Performance optimized operations are branching and merging, committing new changes, and the comparison of the past versions. One of the Git performance strengths is its advanced algorithms. Git focuses only on the file content while determining its storage and version history of the tree. The source code files are renamed, split, and rearranged regularly. The object format of Git repository files uses a mixture of delta encoding and compression. It stores directory contents and version metadata objects.","title":"Performance"},{"location":"profile/","text":"Profile Summary Experience in IT area comprising the configuration management, Deploy, CI/CD pipeline, AWS, and DevOps methodologies. Proven experience on creates Branching and Tagging concepts in Version Control tool like GIT. Proven experience on Build Tools like Maven, ANT. Experience on building and deploying Java web applications in Apache Tomcat. Good experience in automating build process using Jenkins tools. Experience in working with Amazon Web Services (AWS), Creating EC2 Instances and configuring all web Services like EC2, S3 bucket, ELB, IAM through AWS Console. Worked on Dockers Including Docker Installation, Creating Images and Containers. Expertise in creating DevOps strategy in a mix environment of Linux (RHEL, CENTOS,) servers along with Amazon Web Services. Analyzing application logs in order to determine the possible cause of issues and reporting errors directly to the Dev team. Proven experience on continuous Build and Deployments to multiple environments like Dev, QA, Performance and UAT. Managed daily builds and releases to QA. Debugged build failures and worked with developers and QA people to resolve related issues. Experience working on several Docker components like Docker Engine, Hub, Machine, Compose and Docker Registry. Implemented docker in Development and Testing environment using docker-compose and well versed in creating customized docker images using docker file. Worked on Container Tool Docker and Container orchestration on Kubernetes. Technical Skills Operating Systems \u2013 Linux, Windows Cloud Platforms - AWS, AZURE, GCP Basics Containerization Tools \u2013 Docker,Kubernetes Automation \u2013 Shell Scripting, Ansible, PowerShell Infrastructure Provisioning \u2013 Cloud Formation, Terraform, Bicep Version Control Tool \u2013 GIT, Azure Repo Build Software \u2013 Maven CICD \u2013 Jenkins, Azure DevOps Web/App Server \u2013 Tomcat Static Web Development \u2013 MkDocs Monitoring - Cloud watch, Prometheus, Grafana Education M.Tech - Electronics and communication Engineering (Embedded Systems) - 2019 B Tech \u2013 Electronics and communication Engineering \u2013 2017 Diploma(Polytechnic) \u2013 ECE \u2013 2014 10th class \u2013 SSC \u2013 2011","title":"Profile"},{"location":"profile/#profile-summary","text":"Experience in IT area comprising the configuration management, Deploy, CI/CD pipeline, AWS, and DevOps methodologies. Proven experience on creates Branching and Tagging concepts in Version Control tool like GIT. Proven experience on Build Tools like Maven, ANT. Experience on building and deploying Java web applications in Apache Tomcat. Good experience in automating build process using Jenkins tools. Experience in working with Amazon Web Services (AWS), Creating EC2 Instances and configuring all web Services like EC2, S3 bucket, ELB, IAM through AWS Console. Worked on Dockers Including Docker Installation, Creating Images and Containers. Expertise in creating DevOps strategy in a mix environment of Linux (RHEL, CENTOS,) servers along with Amazon Web Services. Analyzing application logs in order to determine the possible cause of issues and reporting errors directly to the Dev team. Proven experience on continuous Build and Deployments to multiple environments like Dev, QA, Performance and UAT. Managed daily builds and releases to QA. Debugged build failures and worked with developers and QA people to resolve related issues. Experience working on several Docker components like Docker Engine, Hub, Machine, Compose and Docker Registry. Implemented docker in Development and Testing environment using docker-compose and well versed in creating customized docker images using docker file. Worked on Container Tool Docker and Container orchestration on Kubernetes.","title":"Profile Summary"},{"location":"profile/#technical-skills","text":"Operating Systems \u2013 Linux, Windows Cloud Platforms - AWS, AZURE, GCP Basics Containerization Tools \u2013 Docker,Kubernetes Automation \u2013 Shell Scripting, Ansible, PowerShell Infrastructure Provisioning \u2013 Cloud Formation, Terraform, Bicep Version Control Tool \u2013 GIT, Azure Repo Build Software \u2013 Maven CICD \u2013 Jenkins, Azure DevOps Web/App Server \u2013 Tomcat Static Web Development \u2013 MkDocs Monitoring - Cloud watch, Prometheus, Grafana","title":"Technical Skills"},{"location":"profile/#education","text":"M.Tech - Electronics and communication Engineering (Embedded Systems) - 2019 B Tech \u2013 Electronics and communication Engineering \u2013 2017 Diploma(Polytechnic) \u2013 ECE \u2013 2014 10th class \u2013 SSC \u2013 2011","title":"Education"},{"location":"security/","text":"The main priority of Git is the integrity of managed source code. In Git repository, versions, directories, the content of the file, tags, and commits are secure because a cryptographically secure SHA1 hashing algorithm is used, which ensures secure code history. Git provides an authentic content history of the source code.","title":"Security"},{"location":"sourcecodemanagement/","text":"","title":"Source Code Management"},{"location":"whatisversioncontrol/","text":"","title":"What is Version Control"}]}